"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyValueStore = void 0;
const core_1 = require("@crawlee/core");
const apify_client_1 = require("apify-client");
const utilities_1 = require("@apify/utilities");
// @ts-ignore newer crawlee versions already declare this method in core
const { getPublicUrl } = core_1.KeyValueStore.prototype;
/**
 * @inheritDoc
 */
class KeyValueStore extends core_1.KeyValueStore {
    /**
     * Returns a URL for the given key that may be used to publicly
     * access the value in the remote key-value store.
     */
    getPublicUrl(key) {
        const config = this.config;
        const isLocalStore = !(
        // eslint-disable-next-line dot-notation
        (this['client'] instanceof apify_client_1.KeyValueStoreClient));
        if (isLocalStore && getPublicUrl) {
            return getPublicUrl.call(this, key);
        }
        const publicUrl = new URL(`${config.get('apiPublicBaseUrl')}/v2/key-value-stores/${this.id}/records/${key}`);
        if (this.storageObject?.urlSigningSecretKey) {
            publicUrl.searchParams.append('signature', (0, utilities_1.createHmacSignature)(this.storageObject.urlSigningSecretKey, key));
        }
        return publicUrl.toString();
    }
    /**
     * @inheritDoc
     */
    static async open(storeIdOrName, options = {}) {
        return super.open(storeIdOrName, options);
    }
}
exports.KeyValueStore = KeyValueStore;
// @ts-ignore newer crawlee versions already declare this method in core
core_1.KeyValueStore.prototype.getPublicUrl = KeyValueStore.prototype.getPublicUrl;
//# sourceMappingURL=key_value_store.js.map